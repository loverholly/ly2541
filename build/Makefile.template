### <1>  Predifined variables before you include this file
AS	=	$(CROSS_COMPILE)as
CC	=	$(CROSS_COMPILE)gcc
CXX	=	$(CROSS_COMPILE)g++
LD	=	$(CROSS_COMPILE)ld
AR	=	$(CROSS_COMPILE)ar
NM	=	$(CROSS_COMPILE)nm
STRIP	=	$(CROSS_COMPILE)strip
RANLIB  = 	$(CROSS_COMPILE)ranlib
OBJCOPY =	$(CROSS_COMPILE)objcopy
OBJDUMP =	$(CROSS_COMPILE)objdump
AWK     = awk
PERL    = perl

export AS CC CXX LD AR NM STRIP RANLIB OBJCOPY OBJDUMP AWK PERL


### <2>  Some basic default value, which can be overrided

# user must have defined $SRCS
#OBJS = $(foreach src, $(SRCS), $(basename $(src)).o)

C_OBJS := $(foreach src, $(C_SRCS), $(basename $(src)).o)
CXX_OBJS := $(foreach src, $(CXX_SRCS), $(basename $(src)).o)

OBJS := $(C_OBJS) $(CXX_OBJS)


### <3> Basic compile flags

# build type, debug or release
ifeq ($(strip $(BUILD_TYPE)), DEBUG)
CFLAGS += -g
CFLAGS += -DDEBUG
endif

# just support on x86 host, or some platform support the static link libarry.
ifeq ($(strip CROSS_COMPILE)), )
CFLAGS += -static
endif

ifeq ($(strip $(BUILD_TYPE)), RELEASE)
CFLAGS += -O2
endif


# 64 bit file offset support
CFLAGS += -D_FILE_OFFSET_BITS=64 -fno-strict-aliasing

CFLAGS += -Wall -DPROG_VERSION=\"$(VERSION)\" -D$(OS_TYPE)

# 依赖库
LDFLAGS += -lpthread -lc -ldl -lm -lrt -T $(ROOTPATH)/scripts/link.ld


DUMFLAGS +=

# 头文件
INC_PATH +=-I$(ROOTPATH)

export CFLAGS LDFLAGS DUMFLAGS INC_PATH


### <4> Compile rules
#.PHONY: all

#$(SUB_DIRS) $(BUILD_APP) $(BUILD_SHARED_LIB) $(BUILD_STATIC_LIB)
#all : $(BUILD_APP) $(BUILD_SHARED_LIB) $(BUILD_STATIC_LIB)
#	@echo BUILD_TARGET: $(BUILD_SHARED_LIB)
#	@echo SUB_DIRS: $(SUB_DIRS)
#	@echo SRCS: $(SRCS)
#	@echo C_OBJS: $(C_OBJS)
#	@echo CXX_OBJS： $(CXX_OBJS)
#	@echo $(VERSION)
#	@echo $(SRC_TREE)

### <5> default rules
#.SUFFIXES: .cpp .c .s

#$(CXX_OBJS) : $(CXX_SRCS)
##	@echo "Complie the c++ code"
#	@test -d $(OBJ_PATH)/$(dir $@) || mkdir -p $(OBJ_PATH)/$(dir $@)
#	$(CXX) $(CFLAGS) -c $(INC_PATH) -o $(OBJ_PATH)/$@ $<

#$(C_OBJS) : $(C_SRCS)
#	@echo "Complie the c code"
#	@test -d $(OBJ_PATH)/$(dir $@) || mkdir -p $(OBJ_PATH)/$(dir $@)
#	$(CC) $(CFLAGS) -c $(INC_PATH) -o $(OBJ_PATH)/$@ $<



# TYPE SHARED LIB -- build shared library
#ifdef BUILD_SHARED_LIB
#$(BUILD_SHARED_LIB) : $(C_OBJS) $(CXX_OBJS) subdirs
#	@echo "BUILD_SHARED_LIB"
#	@test -d $(OBJ_PATH) || mkdir -p $(OBJ_PATH)
#	@test -d $(BIN_PATH) || mkdir -p $(BIN_PATH)

#$(CXX) $(CFLAGS) -rdynamic -shared -o $@ $(foreach obj, $(OBJS), $(OBJ_PATH)/$(obj)) $(LDFLAGS)
#endif

#subdirs:
#	@echo bbbb $(SUB_DIRS)
#	$(MAKE) -C $(SUB_DIRS)


#.PHONY:clean
#clean:
##	-rm -rf $(BUILD_APP) $(BUILD_APP).nostrip $(BUILD_SHARED_LIB) $(BUILD_STATIC_LIB) $(foreach obj, $(OBJS),$(OBJ_PATH)$(obj))
#	@echo "Clean Object Files OK."
